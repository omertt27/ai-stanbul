# Render Blueprint for AI Istanbul (KAM)
# Automatically provisions: Web Service + PostgreSQL + Redis
# Deploy: Push this file to GitHub and import as Blueprint in Render

services:
  # Backend API Service
  - type: web
    name: ai-istanbul-backend
    env: python
    region: oregon  # Options: oregon (US West), frankfurt (EU), singapore (Asia)
    plan: free  # Options: free, starter ($7/mo), standard ($25/mo)
    buildCommand: pip install -r backend/requirements.txt
    startCommand: uvicorn backend.main:app --host 0.0.0.0 --port $PORT --workers 2
    healthCheckPath: /health
    autoDeploy: true  # Auto-deploy on git push
    
    envVars:
      # Python Configuration
      - key: PYTHON_VERSION
        value: "3.11.0"
      
      # Environment
      - key: ENVIRONMENT
        value: production
      - key: DEBUG
        value: "False"
      - key: LOG_LEVEL
        value: INFO
      
      # Port (auto-generated by Render)
      - key: PORT
        generateValue: true
      
      # Database Connection (auto-linked from database below)
      - key: DATABASE_URL
        fromDatabase:
          name: ai-istanbul-db
          property: connectionString
      
      # Redis Connection (auto-linked from redis below)
      - key: REDIS_URL
        fromDatabase:
          name: ai-istanbul-redis
          property: connectionString
      
      # Security - IMPORTANT: Generate these manually!
      # Run: python -c "import secrets; print(secrets.token_urlsafe(32))"
      - key: SECRET_KEY
        sync: false  # Must set manually in Render dashboard
      
      # CORS Configuration
      # Update with your actual Vercel frontend URL after deployment
      - key: ALLOWED_ORIGINS
        value: '["https://ai-istanbul.vercel.app","https://www.ai-istanbul.vercel.app"]'
      
      # Rate Limiting
      - key: RATE_LIMIT_ENABLED
        value: "True"
      - key: RATE_LIMIT_REQUESTS
        value: "100"
      - key: RATE_LIMIT_WINDOW
        value: "3600"
      
      # Sentry Error Tracking (Optional)
      # Get DSN from: https://sentry.io/
      - key: SENTRY_DSN
        sync: false  # Must set manually if using Sentry
      - key: SENTRY_ENVIRONMENT
        value: production
      - key: SENTRY_TRACES_SAMPLE_RATE
        value: "0.1"
      - key: SENTRY_PROFILES_SAMPLE_RATE
        value: "0.1"
      
      # Feature Flags
      - key: USE_NEURAL_RANKING
        value: "True"
      - key: ADVANCED_UNDERSTANDING_ENABLED
        value: "True"
      
      # Optional API Keys (set manually if needed)
      - key: OPENWEATHER_API_KEY
        sync: false

databases:
  # PostgreSQL Database
  - name: ai-istanbul-db
    databaseName: ai_istanbul
    user: ai_istanbul_user
    plan: free  # Options: free (90 days), starter ($7/mo), standard ($50/mo)
    region: oregon  # Must match web service region
    ipAllowList: []  # Empty = allow all (good for development)
    
  # Redis Cache
  - name: ai-istanbul-redis
    plan: free  # Options: free (25MB, expires after 90 days), starter ($10/mo - 256MB)
    region: oregon  # Must match web service region
    maxmemoryPolicy: allkeys-lru  # Evict least recently used keys when full
    ipAllowList: []  # Empty = allow all

# Note: After deploying via Blueprint:
# 1. Go to Render dashboard → Your web service → Environment
# 2. Set SECRET_KEY (generate with: python -c "import secrets; print(secrets.token_urlsafe(32))")
# 3. Set SENTRY_DSN if using Sentry error tracking
# 4. Update ALLOWED_ORIGINS with your actual Vercel frontend URL
# 5. Go to Shell tab and run: python -c "from backend.database import engine, Base; from backend.models import *; Base.metadata.create_all(engine)"
