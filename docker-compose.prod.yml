version: '3.8'

services:
  # Backend API Service (Production)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - DATABASE_URL=postgresql://istanbul_user:${POSTGRES_PASSWORD}@postgres:5432/istanbul_ai
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS:-https://aistanbul.app}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./backend:/app/backend
    networks:
      - istanbul-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging

  # Frontend Production Build
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    networks:
      - istanbul-network
    volumes:
      - frontend_build:/usr/share/nginx/html:ro
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    logging: *default-logging

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: istanbul_ai
      POSTGRES_USER: istanbul_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/add_indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
      - ./database/backup:/backup
    networks:
      - istanbul-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U istanbul_user -d istanbul_ai"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    logging: *default-logging

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - istanbul-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging: *default-logging

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - frontend_build:/var/www/html:ro
      - ./nginx/cache:/var/cache/nginx
      - ./logs/nginx:/var/log/nginx
      - ./nginx/error-pages:/var/www/error-pages:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - istanbul-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging: *default-logging

  # Certbot for SSL certificates
  certbot:
    image: certbot/certbot
    restart: "no"
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/certbot-webroot:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email ${ADMIN_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN_NAME}
    depends_on:
      - nginx
    networks:
      - istanbul-network
    logging: *default-logging

  # Log aggregation (optional)
  log-aggregator:
    image: fluent/fluent-bit:latest
    restart: unless-stopped
    volumes:
      - ./logs:/var/log/app:ro
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
    networks:
      - istanbul-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    logging: *default-logging

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - istanbul-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
    logging: *default-logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_build:
    driver: local
  prometheus_data:
    driver: local

networks:
  istanbul-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment-specific configurations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
