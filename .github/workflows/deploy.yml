name: ðŸš€ Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  # Build and push Docker image
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/istanbul-ai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Render/Railway/Fly.io
  deploy-backend:
    runs-on: ubuntu-latest
    needs: build-and-push
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Render
      if: ${{ secrets.RENDER_DEPLOY_HOOK }}
      run: |
        curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}
    
    - name: Deploy to Railway
      if: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        npx @railway/cli deploy --service backend
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

  # Deploy frontend to Vercel
  deploy-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: ./frontend

  # Database Migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      run: |
        cd backend
        alembic upgrade head

  # Health check and rollback
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, migrate-database]
    
    steps:
    - name: Health check
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Check backend health
        curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
        
        # Check frontend
        curl -f ${{ secrets.FRONTEND_URL }} || exit 1
        
        # Test AI endpoint
        curl -X POST ${{ secrets.BACKEND_URL }}/ai \
          -H "Content-Type: application/json" \
          -d '{"query": "test", "language": "en"}' || exit 1

  # Notify team
  notify:
    runs-on: ubuntu-latest
    needs: [health-check]
    if: always()
    
    steps:
    - name: Notify Slack
      if: ${{ secrets.SLACK_WEBHOOK }}
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          Istanbul AI Deployment Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          
    - name: Notify Discord
      if: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        curl -X POST ${{ secrets.DISCORD_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{
            "content": "ðŸš€ Istanbul AI deployed to production!",
            "embeds": [{
              "title": "Deployment Status",
              "description": "Status: ${{ job.status }}\nCommit: ${{ github.sha }}",
              "color": 3066993
            }]
          }'
