name: AI Istanbul Chatbot - Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
        
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: istanbul_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r tests/requirements-test.txt
        
    - name: Set up environment variables
      run: |
        echo "TESTING=true" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/istanbul_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "OPENAI_API_KEY=test-key-for-ci" >> $GITHUB_ENV
        echo "ANTHROPIC_API_KEY=test-key-for-ci" >> $GITHUB_ENV
        echo "GOOGLE_API_KEY=test-key-for-ci" >> $GITHUB_ENV
        
    - name: Wait for services
      run: |
        # Wait for Redis
        until redis-cli -h localhost ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Run API endpoint tests
      run: |
        pytest tests/test_api_endpoints.py -v --tb=short --junit-xml=test-results/api-tests.xml
        
    - name: Run AI and multilingual tests
      run: |
        pytest tests/test_ai_multilingual.py -v --tb=short --junit-xml=test-results/ai-tests.xml
        
    - name: Run GDPR compliance tests
      run: |
        pytest tests/test_gdpr_compliance.py -v --tb=short --junit-xml=test-results/gdpr-tests.xml
        
    - name: Run performance tests
      run: |
        pytest tests/test_performance.py -v --tb=short --junit-xml=test-results/performance-tests.xml
        
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short --junit-xml=test-results/integration-tests.xml
        
    - name: Run complete test suite with coverage
      run: |
        pytest tests/ --cov=backend --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70 --junit-xml=test-results/complete-tests.xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results/
          htmlcov/
          coverage.xml
          
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (Python ${{ matrix.python-version }})
        path: test-results/*.xml
        reporter: java-junit

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        pip install bandit safety
        
    - name: Run security scan with bandit
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        
    - name: Run dependency security check
      run: |
        safety check --json --output safety-report.json || true
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install code quality tools
      run: |
        pip install black isort flake8 mypy
        
    - name: Check code formatting with black
      run: |
        black --check backend/ tests/
        
    - name: Check import sorting with isort
      run: |
        isort --check-only backend/ tests/
        
    - name: Lint with flake8
      run: |
        flake8 backend/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Type check with mypy
      run: |
        mypy backend/ --ignore-missing-imports || true

  deployment-readiness:
    needs: [test, security-scan, code-quality]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deployment readiness check
      run: |
        echo "ðŸŽ¯ All tests passed!"
        echo "âœ… Security scan completed"
        echo "âœ… Code quality checks passed"
        echo "ðŸš€ Ready for production deployment"
